/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    combos {
        compatible = "zmk,combos";

        tab {
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
        
        ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <7 8>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ---------------------------------------------------------------------
// |  A  |  Z  |  E  |  R  |  T  |     |  Y  |  U   |  I   |   O   | P |
// |  Q  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |   L   | M | 
// |  W  |  X  |  C  |  V  |  B  |     |  N  |  ,   |  ;   |   :   | . |
//             | mo1 | CMD | SPC |     | ENT | BSPC | mo2  |
                        display-name = "Base";
                        bindings = <
   AS(Q) AS(W) AS(E) AS(R) AS(T)     AS(Y)   AS(U)  AS(I)     AS(O)     AS(P)
   AS(A) AS(S) AS(D) AS(F) AS(G)     AS(H)   AS(J)  AS(K)     AS(L)     AS(SEMI)
   AS(Z) AS(X) AS(C) AS(V) AS(B)     AS(N)   &kp M  &kp COMMA &kp DOT   &kp LS(COMMA)
        &mo 1 &kp LGUI &kp SPACE     AS(RET) &kp BSPC  &mo 2
                        >;
                };

                lower_layer {
// ---------------------------------------------------------------------
// |  1 |   2 |  3  |  4  |   5 |     |   6 |   7 |   8 |   9  |  0  |
// | `  | '   |  "  |  -  |  _  |     | LFT | DWN |  UP | RGT  |  +  |
// |    |     |     |     |     |     |  ?  |  /  |  \  |  !   |  =  |
//               | GUI |     | SPC |     | ENT | ESC | TAB |
                        display-name = "Lower";
                        bindings = <
   &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT        &kp CARET &kp AMPS  &kp LS(N8) &kp LPAR  &kp RPAR
   &kp BSLH     &kp N4       &kp N3       &kp EQUAL    &kp LS(EQUAL)    &kp LEFT  &kp DOWN  &kp UP          &kp RIGHT &kp LS(FSLH)
   &trans       &trans       &trans       &trans       &trans           &trans    &kp LS(DOT) &trans          &kp N8 &kp (FSLH)
                             &kp LGUI     &trans       &kp SPACE        AS(RET)   &kp ESC   &kp TAB
                        >;
                };

                raise_layer {
// --------------------------------------------------------------------
// |  @ |  } |  ]  |  (  |  %  |     |  & |   ~ |  é |   è |   à  |
// |  # |  { |  [  |  )  |  $  |     |  * |     |    |     |      |
// |  < |  > |     |     |  €  |     |    |     |    |     |      |
//           | GUI | ESC | SPC |     | ENT |     | TAB |
                        display-name = "Raise";
                        bindings = <

   AS(N6)    AS(N2)    AS(N3)    &kp MINUS AS(N5)        &kp N1    AS(N7)    &kp N2   &kp N7   &kp N0
   AS(MINUS) AS(EQUAL) &kp LBRC  &kp N5    &kp RBKT      &kp RBRC &kp RBKT  &kp RBRC  &kp LBKT &kp N9
   &kp GRAVE &kp LS(GRAVE) &trans    AS(COMMA) &kp COLON     &kp LS(M) AS(DOT)   &kp LCTRL &kp RALT &kp LBKT
                       &kp LGUI  &kp ESC   &kp SPACE     AS(RET)   &trans    &kp TAB
                        >;
                };
        };
};
