/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        tab {
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <20 21>;
        };

        ctrlleft {
            bindings = <&kp LCTRL>;
            key-positions = <28 29>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ---------------------------------------------------------------------
// |  A  |  Z  |  E  |  R  |  T  |     |  Y  |  U   |  I   |   O   | P |
// |  Q  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |   L   | M | 
// |  W  |  X  |  C  |  V  |  B  |     |  N  |  ,   |  ;   |   :   | = |
//             | SIFT| BSPC| SPC |     | ENT | COM  | mo1  |
                        display-name = "Base";
                        bindings = <
   &kp Q  &kp W &kp E      &kp R    &kp T           &kp Y   &kp U    &kp I     &kp O     &kp P
   &kp A  &kp S &kp D      &kp F    &kp G           &kp H   &kp J    &kp K     &kp L     &kp SEMI 
   &kp Z  &kp X &kp C      &kp V    &kp B           &kp N   &kp M    &kp COMMA &kp DOT   &kp (FSLH)
                &kp LSHIFT &kp BSPC &kp SPACE       AS(RET) &kp LGUI &mo 1
                        >;
                };

                lower_layer {
// ---------------------------------------------------------------------
// |   |    |    |     |     |     |    |  7  |  8  |  9  |  /  |  %  
// |   |    |    |     |     |     |    |  4  |  5  |  6  |  °  |  -  
// |   |    |    |     |     |     |    |  1  |  2  |  3  |  ,  |  +  
//               |     |     |     |    |  .  |  0  |  ,  |
                        display-name = "Lower";
                        bindings = <
   &none   &none   &none    &none   &none      &kp AMPS       &kp LS(N8)  &kp LPAR   &kp LS(DOT)    &kp LS(APOS) 
   &none   &none   &none    &none   &none      &kp DLLR       &kp PRCNT   &kp CARET  &kp LS(MINUS)  &kp EQUAL
   &none   &none   &none    &none   &none      &kp EXCL       &kp AT      &kp HASH   &kp M          &kp LS(FSLH)
                   &none    &none   &none      &kp LS(COMMA)  &kp RPAR    &kp M 
                        >;
                };

                raise_layer {
// --------------------------------------------------------------------
// |  @ |  é |  {  |  }  |  ` |     |  ~ |   è |  ! |  ç  |   à  |
// |  # |  & |  (  |  )  |  " |     |  * |  -  |  _ |  |  |   €  |
// |  < |  > |  [  |  ]  |  ' |     |    |     |    |     |      |
//           |  ¨  |  ^  |  * |     |    |     |    |
                        display-name = "Raise";
                        bindings = <

   &kp RA(BSLH)      &kp N2         &kp RA(N5)        &kp RA(MINUS)      &kp BSLH            &kp N1    &kp RA(N)      &kp N2    &kp N7    &kp N0
   &kp RA(LS(BSLH))  &kp N1         &kp N5            &kp MINUS          &kp N3              &kp RBRC  &kp RA(LS(L))  &kp RBRC  &kp LBKT  &kp N9
   &kp GRAVE         &kp LS(GRAVE)  &kp RA(LS(N5))    &kp RA(LS(MINUS))  &kp N4              &trans    &trans         &trans    &trans    &trans
                                    &LS(LBKT)         &kp LBKT           &kp RBRC            &trans   &trans         &trans
                        >;
                };
        };
};
